aaa (); dump();
aad (); dump();
aam (); dump();
aas (); dump();
daa (); dump();
das (); dump();
popad (); dump();
popfd (); dump();
pusha (); dump();
pushad (); dump();
pushfd (); dump();
popa (); dump();
cbw (); dump();
cdq (); dump();
clc (); dump();
cld (); dump();
cli (); dump();
cmc (); dump();
cpuid (); dump();
cwd (); dump();
cwde (); dump();
lahf (); dump();
lock (); dump();
nop (); dump();
sahf (); dump();
stc (); dump();
std (); dump();
sti (); dump();
emms (); dump();
pause (); dump();
sfence (); dump();
lfence (); dump();
mfence (); dump();
monitor (); dump();
mwait (); dump();
rdmsr (); dump();
rdpmc (); dump();
rdtsc (); dump();
wait (); dump();
wbinvd (); dump();
wrmsr (); dump();
xlatb (); dump();
popf (); dump();
pushf (); dump();
f2xm1 (); dump();
fabs (); dump();
faddp (); dump();
fchs (); dump();
fcom (); dump();
fcomp (); dump();
fcompp (); dump();
fcos (); dump();
fdecstp (); dump();
fdivp (); dump();
fdivrp (); dump();
fincstp (); dump();
fld1 (); dump();
fldl2t (); dump();
fldl2e (); dump();
fldpi (); dump();
fldlg2 (); dump();
fldln2 (); dump();
fldz (); dump();
fmulp (); dump();
fnop (); dump();
fpatan (); dump();
fprem (); dump();
fprem1 (); dump();
fptan (); dump();
frndint (); dump();
fscale (); dump();
fsin (); dump();
fsincos (); dump();
fsqrt (); dump();
fsubp (); dump();
fsubrp (); dump();
ftst (); dump();
fucom (); dump();
fucomp (); dump();
fucompp (); dump();
fxam (); dump();
fxch (); dump();
fxtract (); dump();
fyl2x (); dump();
fyl2xp1 (); dump();
bswap (esp); dump();
bswap (eax); dump();
lea (ebx, ptr[eax+ecx+3]); dump();
lea (eax, ptr[eax+ecx+3]); dump();
jmp (esi); dump();
jmp (eax); dump();
call (ecx); dump();
call (eax); dump();
jmp (ptr[eax+ecx+3]); dump();
call (ptr[eax+ecx+3]); dump();
call (si); dump();
call (ax); dump();
call (ptr[(void*)0x123]); dump();
call (getCode() + 5 ); dump();
adc (ecx, ptr[eax+ecx+3]); dump();
adc (esp, ecx); dump();
adc (ecx, eax); dump();
adc (eax, ptr[eax+ecx+3]); dump();
adc (eax, edi); dump();
adc (eax, eax); dump();
adc (cx, ptr[eax+ecx+3]); dump();
adc (cx, sp); dump();
adc (bp, ax); dump();
adc (ax, ptr[eax+ecx+3]); dump();
adc (ax, cx); dump();
adc (ax, ax); dump();
adc (cl, ptr[eax+ecx+3]); dump();
adc (dl, cl); dump();
adc (dl, al); dump();
adc (al, ptr[eax+ecx+3]); dump();
adc (al, ah); dump();
adc (al, al); dump();
adc (ptr[eax+ecx+3], esi); dump();
adc (ptr[eax+ecx+3], eax); dump();
adc (ptr[eax+ecx+3], bh); dump();
adc (ptr[eax+ecx+3], si); dump();
adc (ptr[eax+ecx+3], ax); dump();
adc (ptr[eax+ecx+3], al); dump();
adc (byte [eax+edx], 4); dump();
adc (byte [eax+edx], -30); dump();
adc (word [esi], 4); dump();
adc (word [esi], -30); dump();
adc (word [esi], 1000); dump();
adc (word [esi], -1000); dump();
adc (dword [ebp*2], 12345678); dump();
adc (dword [ebp*2], 4); dump();
adc (dword [ebp*2], -30); dump();
adc (dword [ebp*2], -100000); dump();
adc (edi, 12345678); dump();
adc (ecx, 4); dump();
adc (edi, -30); dump();
adc (eax, 12345678); dump();
adc (eax, 4); dump();
adc (eax, -30); dump();
adc (di, 4); dump();
adc (dx, -30); dump();
adc (bp, 1000); dump();
adc (bx, -1000); dump();
adc (ax, 4); dump();
adc (ax, -30); dump();
adc (ax, 1000); dump();
adc (ax, -1000); dump();
adc (bh, -30); dump();
adc (bl, 4); dump();
adc (al, -30); dump();
adc (al, 4); dump();
add (ecx, ptr[eax+ecx+3]); dump();
add (ebp, ebx); dump();
add (esp, eax); dump();
add (eax, ptr[eax+ecx+3]); dump();
add (eax, edx); dump();
add (eax, eax); dump();
add (cx, ptr[eax+ecx+3]); dump();
add (di, cx); dump();
add (sp, ax); dump();
add (ax, ptr[eax+ecx+3]); dump();
add (ax, cx); dump();
add (ax, ax); dump();
add (cl, ptr[eax+ecx+3]); dump();
add (cl, ah); dump();
add (dl, al); dump();
add (al, ptr[eax+ecx+3]); dump();
add (al, cl); dump();
add (al, al); dump();
add (ptr[eax+ecx+3], ecx); dump();
add (ptr[eax+ecx+3], eax); dump();
add (ptr[eax+ecx+3], ah); dump();
add (ptr[eax+ecx+3], cx); dump();
add (ptr[eax+ecx+3], ax); dump();
add (ptr[eax+ecx+3], al); dump();
add (byte [eax+edx], 4); dump();
add (byte [eax+edx], -30); dump();
add (word [esi], 4); dump();
add (word [esi], -30); dump();
add (word [esi], 1000); dump();
add (word [esi], -1000); dump();
add (dword [ebp*2], 12345678); dump();
add (dword [ebp*2], 4); dump();
add (dword [ebp*2], -30); dump();
add (dword [ebp*2], -100000); dump();
add (ecx, 12345678); dump();
add (ecx, 4); dump();
add (esp, -30); dump();
add (eax, 12345678); dump();
add (eax, 4); dump();
add (eax, -30); dump();
add (dx, 4); dump();
add (dx, -30); dump();
add (bx, 1000); dump();
add (cx, -1000); dump();
add (ax, 4); dump();
add (ax, -30); dump();
add (ax, 1000); dump();
add (ax, -1000); dump();
add (ch, -30); dump();
add (bh, 4); dump();
add (al, -30); dump();
add (al, 4); dump();
and (ecx, ptr[eax+ecx+3]); dump();
and (edx, esp); dump();
and (ecx, eax); dump();
and (eax, ptr[eax+ecx+3]); dump();
and (eax, esp); dump();
and (eax, eax); dump();
and (cx, ptr[eax+ecx+3]); dump();
and (dx, dx); dump();
and (cx, ax); dump();
and (ax, ptr[eax+ecx+3]); dump();
and (ax, cx); dump();
and (ax, ax); dump();
and (ch, ptr[eax+ecx+3]); dump();
and (ch, ah); dump();
and (cl, al); dump();
and (al, ptr[eax+ecx+3]); dump();
and (al, ch); dump();
and (al, al); dump();
and (ptr[eax+ecx+3], edx); dump();
and (ptr[eax+ecx+3], eax); dump();
and (ptr[eax+ecx+3], bl); dump();
and (ptr[eax+ecx+3], bx); dump();
and (ptr[eax+ecx+3], ax); dump();
and (ptr[eax+ecx+3], al); dump();
and (byte [eax+edx], 4); dump();
and (byte [eax+edx], -30); dump();
and (word [esi], 4); dump();
and (word [esi], -30); dump();
and (word [esi], 1000); dump();
and (word [esi], -1000); dump();
and (dword [ebp*2], 12345678); dump();
and (dword [ebp*2], 4); dump();
and (dword [ebp*2], -30); dump();
and (dword [ebp*2], -100000); dump();
and (ecx, 12345678); dump();
and (esp, 4); dump();
and (ecx, -30); dump();
and (eax, 12345678); dump();
and (eax, 4); dump();
and (eax, -30); dump();
and (cx, 4); dump();
and (cx, -30); dump();
and (di, 1000); dump();
and (cx, -1000); dump();
and (ax, 4); dump();
and (ax, -30); dump();
and (ax, 1000); dump();
and (ax, -1000); dump();
and (dl, -30); dump();
and (bh, 4); dump();
and (al, -30); dump();
and (al, 4); dump();
cmp (ebp, ptr[eax+ecx+3]); dump();
cmp (esp, edi); dump();
cmp (ecx, eax); dump();
cmp (eax, ptr[eax+ecx+3]); dump();
cmp (eax, ecx); dump();
cmp (eax, eax); dump();
cmp (cx, ptr[eax+ecx+3]); dump();
cmp (bx, si); dump();
cmp (bp, ax); dump();
cmp (ax, ptr[eax+ecx+3]); dump();
cmp (ax, si); dump();
cmp (ax, ax); dump();
cmp (cl, ptr[eax+ecx+3]); dump();
cmp (dh, dh); dump();
cmp (cl, al); dump();
cmp (al, ptr[eax+ecx+3]); dump();
cmp (al, ah); dump();
cmp (al, al); dump();
cmp (ptr[eax+ecx+3], ebx); dump();
cmp (ptr[eax+ecx+3], eax); dump();
cmp (ptr[eax+ecx+3], dh); dump();
cmp (ptr[eax+ecx+3], bx); dump();
cmp (ptr[eax+ecx+3], ax); dump();
cmp (ptr[eax+ecx+3], al); dump();
cmp (byte [eax+edx], 4); dump();
cmp (byte [eax+edx], -30); dump();
cmp (word [esi], 4); dump();
cmp (word [esi], -30); dump();
cmp (word [esi], 1000); dump();
cmp (word [esi], -1000); dump();
cmp (dword [ebp*2], 12345678); dump();
cmp (dword [ebp*2], 4); dump();
cmp (dword [ebp*2], -30); dump();
cmp (dword [ebp*2], -100000); dump();
cmp (edi, 12345678); dump();
cmp (esi, 4); dump();
cmp (edx, -30); dump();
cmp (eax, 12345678); dump();
cmp (eax, 4); dump();
cmp (eax, -30); dump();
cmp (bx, 4); dump();
cmp (cx, -30); dump();
cmp (di, 1000); dump();
cmp (bx, -1000); dump();
cmp (ax, 4); dump();
cmp (ax, -30); dump();
cmp (ax, 1000); dump();
cmp (ax, -1000); dump();
cmp (cl, -30); dump();
cmp (ah, 4); dump();
cmp (al, -30); dump();
cmp (al, 4); dump();
or (ebx, ptr[eax+ecx+3]); dump();
or (esp, esi); dump();
or (ecx, eax); dump();
or (eax, ptr[eax+ecx+3]); dump();
or (eax, ecx); dump();
or (eax, eax); dump();
or (sp, ptr[eax+ecx+3]); dump();
or (bp, cx); dump();
or (bx, ax); dump();
or (ax, ptr[eax+ecx+3]); dump();
or (ax, cx); dump();
or (ax, ax); dump();
or (cl, ptr[eax+ecx+3]); dump();
or (bl, dh); dump();
or (cl, al); dump();
or (al, ptr[eax+ecx+3]); dump();
or (al, dh); dump();
or (al, al); dump();
or (ptr[eax+ecx+3], esp); dump();
or (ptr[eax+ecx+3], eax); dump();
or (ptr[eax+ecx+3], bh); dump();
or (ptr[eax+ecx+3], bp); dump();
or (ptr[eax+ecx+3], ax); dump();
or (ptr[eax+ecx+3], al); dump();
or (byte [eax+edx], 4); dump();
or (byte [eax+edx], -30); dump();
or (word [esi], 4); dump();
or (word [esi], -30); dump();
or (word [esi], 1000); dump();
or (word [esi], -1000); dump();
or (dword [ebp*2], 12345678); dump();
or (dword [ebp*2], 4); dump();
or (dword [ebp*2], -30); dump();
or (dword [ebp*2], -100000); dump();
or (ebp, 12345678); dump();
or (edx, 4); dump();
or (esp, -30); dump();
or (eax, 12345678); dump();
or (eax, 4); dump();
or (eax, -30); dump();
or (di, 4); dump();
or (bx, -30); dump();
or (cx, 1000); dump();
or (bp, -1000); dump();
or (ax, 4); dump();
or (ax, -30); dump();
or (ax, 1000); dump();
or (ax, -1000); dump();
or (cl, -30); dump();
or (ch, 4); dump();
or (al, -30); dump();
or (al, 4); dump();
sbb (ebp, ptr[eax+ecx+3]); dump();
sbb (esi, esi); dump();
sbb (ebp, eax); dump();
sbb (eax, ptr[eax+ecx+3]); dump();
sbb (eax, edi); dump();
sbb (eax, eax); dump();
sbb (bp, ptr[eax+ecx+3]); dump();
sbb (bx, cx); dump();
sbb (di, ax); dump();
sbb (ax, ptr[eax+ecx+3]); dump();
sbb (ax, bx); dump();
sbb (ax, ax); dump();
sbb (cl, ptr[eax+ecx+3]); dump();
sbb (ah, bl); dump();
sbb (dh, al); dump();
sbb (al, ptr[eax+ecx+3]); dump();
sbb (al, cl); dump();
sbb (al, al); dump();
sbb (ptr[eax+ecx+3], ecx); dump();
sbb (ptr[eax+ecx+3], eax); dump();
sbb (ptr[eax+ecx+3], dh); dump();
sbb (ptr[eax+ecx+3], dx); dump();
sbb (ptr[eax+ecx+3], ax); dump();
sbb (ptr[eax+ecx+3], al); dump();
sbb (byte [eax+edx], 4); dump();
sbb (byte [eax+edx], -30); dump();
sbb (word [esi], 4); dump();
sbb (word [esi], -30); dump();
sbb (word [esi], 1000); dump();
sbb (word [esi], -1000); dump();
sbb (dword [ebp*2], 12345678); dump();
sbb (dword [ebp*2], 4); dump();
sbb (dword [ebp*2], -30); dump();
sbb (dword [ebp*2], -100000); dump();
sbb (ebp, 12345678); dump();
sbb (ecx, 4); dump();
sbb (ebx, -30); dump();
sbb (eax, 12345678); dump();
sbb (eax, 4); dump();
sbb (eax, -30); dump();
sbb (di, 4); dump();
sbb (cx, -30); dump();
sbb (bp, 1000); dump();
sbb (si, -1000); dump();
sbb (ax, 4); dump();
sbb (ax, -30); dump();
sbb (ax, 1000); dump();
sbb (ax, -1000); dump();
sbb (ch, -30); dump();
sbb (bl, 4); dump();
sbb (al, -30); dump();
sbb (al, 4); dump();
sub (ecx, ptr[eax+ecx+3]); dump();
sub (edi, esp); dump();
sub (edx, eax); dump();
sub (eax, ptr[eax+ecx+3]); dump();
sub (eax, edx); dump();
sub (eax, eax); dump();
sub (bp, ptr[eax+ecx+3]); dump();
sub (dx, di); dump();
sub (di, ax); dump();
sub (ax, ptr[eax+ecx+3]); dump();
sub (ax, bx); dump();
sub (ax, ax); dump();
sub (bh, ptr[eax+ecx+3]); dump();
sub (ch, dl); dump();
sub (bl, al); dump();
sub (al, ptr[eax+ecx+3]); dump();
sub (al, ah); dump();
sub (al, al); dump();
sub (ptr[eax+ecx+3], ecx); dump();
sub (ptr[eax+ecx+3], eax); dump();
sub (ptr[eax+ecx+3], dl); dump();
sub (ptr[eax+ecx+3], sp); dump();
sub (ptr[eax+ecx+3], ax); dump();
sub (ptr[eax+ecx+3], al); dump();
sub (byte [eax+edx], 4); dump();
sub (byte [eax+edx], -30); dump();
sub (word [esi], 4); dump();
sub (word [esi], -30); dump();
sub (word [esi], 1000); dump();
sub (word [esi], -1000); dump();
sub (dword [ebp*2], 12345678); dump();
sub (dword [ebp*2], 4); dump();
sub (dword [ebp*2], -30); dump();
sub (dword [ebp*2], -100000); dump();
sub (ecx, 12345678); dump();
sub (edi, 4); dump();
sub (edi, -30); dump();
sub (eax, 12345678); dump();
sub (eax, 4); dump();
sub (eax, -30); dump();
sub (bp, 4); dump();
sub (dx, -30); dump();
sub (bx, 1000); dump();
sub (si, -1000); dump();
sub (ax, 4); dump();
sub (ax, -30); dump();
sub (ax, 1000); dump();
sub (ax, -1000); dump();
sub (bh, -30); dump();
sub (ah, 4); dump();
sub (al, -30); dump();
sub (al, 4); dump();
xor (esi, ptr[eax+ecx+3]); dump();
xor (ebp, ecx); dump();
xor (edi, eax); dump();
xor (eax, ptr[eax+ecx+3]); dump();
xor (eax, edi); dump();
xor (eax, eax); dump();
xor (cx, ptr[eax+ecx+3]); dump();
xor (sp, cx); dump();
xor (si, ax); dump();
xor (ax, ptr[eax+ecx+3]); dump();
xor (ax, bx); dump();
xor (ax, ax); dump();
xor (bl, ptr[eax+ecx+3]); dump();
xor (bh, bh); dump();
xor (ah, al); dump();
xor (al, ptr[eax+ecx+3]); dump();
xor (al, bh); dump();
xor (al, al); dump();
xor (ptr[eax+ecx+3], ebx); dump();
xor (ptr[eax+ecx+3], eax); dump();
xor (ptr[eax+ecx+3], ah); dump();
xor (ptr[eax+ecx+3], cx); dump();
xor (ptr[eax+ecx+3], ax); dump();
xor (ptr[eax+ecx+3], al); dump();
xor (byte [eax+edx], 4); dump();
xor (byte [eax+edx], -30); dump();
xor (word [esi], 4); dump();
xor (word [esi], -30); dump();
xor (word [esi], 1000); dump();
xor (word [esi], -1000); dump();
xor (dword [ebp*2], 12345678); dump();
xor (dword [ebp*2], 4); dump();
xor (dword [ebp*2], -30); dump();
xor (dword [ebp*2], -100000); dump();
xor (edi, 12345678); dump();
xor (ebx, 4); dump();
xor (ecx, -30); dump();
xor (eax, 12345678); dump();
xor (eax, 4); dump();
xor (eax, -30); dump();
xor (dx, 4); dump();
xor (cx, -30); dump();
xor (si, 1000); dump();
xor (cx, -1000); dump();
xor (ax, 4); dump();
xor (ax, -30); dump();
xor (ax, 1000); dump();
xor (ax, -1000); dump();
xor (dh, -30); dump();
xor (ah, 4); dump();
xor (al, -30); dump();
xor (al, 4); dump();
inc (ecx); dump();
inc (eax); dump();
inc (dl); dump();
inc (bx); dump();
inc (ax); dump();
inc (al); dump();
inc (byte [eax+edx]); dump();
inc (word [esi]); dump();
inc (dword [ebp*2]); dump();
dec (edi); dump();
dec (eax); dump();
dec (bh); dump();
dec (bx); dump();
dec (ax); dump();
dec (al); dump();
dec (byte [eax+edx]); dump();
dec (word [esi]); dump();
dec (dword [ebp*2]); dump();
div (ebp); dump();
div (eax); dump();
div (ah); dump();
div (di); dump();
div (ax); dump();
div (al); dump();
div (byte [eax+edx]); dump();
div (word [esi]); dump();
div (dword [ebp*2]); dump();
idiv (esi); dump();
idiv (eax); dump();
idiv (ah); dump();
idiv (bp); dump();
idiv (ax); dump();
idiv (al); dump();
idiv (byte [eax+edx]); dump();
idiv (word [esi]); dump();
idiv (dword [ebp*2]); dump();
imul (ecx); dump();
imul (eax); dump();
imul (cl); dump();
imul (dx); dump();
imul (ax); dump();
imul (al); dump();
imul (byte [eax+edx]); dump();
imul (word [esi]); dump();
imul (dword [ebp*2]); dump();
mul (ecx); dump();
mul (eax); dump();
mul (ah); dump();
mul (dx); dump();
mul (ax); dump();
mul (al); dump();
mul (byte [eax+edx]); dump();
mul (word [esi]); dump();
mul (dword [ebp*2]); dump();
neg (edx); dump();
neg (eax); dump();
neg (dl); dump();
neg (dx); dump();
neg (ax); dump();
neg (al); dump();
neg (byte [eax+edx]); dump();
neg (word [esi]); dump();
neg (dword [ebp*2]); dump();
not (edx); dump();
not (eax); dump();
not (cl); dump();
not (si); dump();
not (ax); dump();
not (al); dump();
not (byte [eax+edx]); dump();
not (word [esi]); dump();
not (dword [ebp*2]); dump();
imul (bx, bx); dump();
imul (sp, ax); dump();
imul (dx, word [esi]); dump();
imul (ax, dx); dump();
imul (ax, ax); dump();
imul (ax, word [esi]); dump();
imul (esp, esi); dump();
imul (ecx, eax); dump();
imul (ebp, dword [ebp*2]); dump();
imul (eax, ecx); dump();
imul (eax, eax); dump();
imul (eax, dword [ebp*2]); dump();
imul (cx, ptr[eax+ecx+3], 4); dump();
imul (cx, ptr[eax+ecx+3], 1000); dump();
imul (di, dx, 4); dump();
imul (dx, dx, 1000); dump();
imul (cx, ax, 4); dump();
imul (sp, ax, 1000); dump();
imul (ax, ptr[eax+ecx+3], 4); dump();
imul (ax, ptr[eax+ecx+3], 1000); dump();
imul (ax, sp, 4); dump();
imul (ax, sp, 1000); dump();
imul (ax, ax, 4); dump();
imul (ax, ax, 1000); dump();
imul (edi, ptr[eax+ecx+3], 12345678); dump();
imul (ebx, ptr[eax+ecx+3], 4); dump();
imul (ecx, esi, 12345678); dump();
imul (ebx, edx, 4); dump();
imul (ecx, eax, 12345678); dump();
imul (ebx, eax, 4); dump();
imul (eax, ptr[eax+ecx+3], 12345678); dump();
imul (eax, ptr[eax+ecx+3], 4); dump();
imul (eax, esp, 12345678); dump();
imul (eax, edi, 4); dump();
imul (eax, eax, 12345678); dump();
imul (eax, eax, 4); dump();
push (sp); dump();
push (ax); dump();
push (4); dump();
push (word [esi]); dump();
pop (di); dump();
pop (ax); dump();
pop (word [esi]); dump();
push (esi); dump();
push (eax); dump();
push (12345678); dump();
push (dword [ebp*2]); dump();
pop (esi); dump();
pop (eax); dump();
pop (dword [ebp*2]); dump();
test (ptr[eax+ecx+3], esp); dump();
test (ptr[eax+ecx+3], eax); dump();
test (ebp, edi); dump();
test (edi, eax); dump();
test (eax, ebx); dump();
test (eax, eax); dump();
test (ptr[eax+ecx+3], cx); dump();
test (ptr[eax+ecx+3], ax); dump();
test (sp, di); dump();
test (cx, ax); dump();
test (ax, di); dump();
test (ax, ax); dump();
test (ptr[eax+ecx+3], cl); dump();
test (ptr[eax+ecx+3], al); dump();
test (dh, ch); dump();
test (ch, al); dump();
test (al, ah); dump();
test (al, al); dump();
test (ecx, 4); dump();
test (eax, 4); dump();
test (ah, 4); dump();
test (bp, 4); dump();
test (ax, 4); dump();
test (al, 4); dump();
test (byte [eax+edx], 4); dump();
test (word [esi], 4); dump();
test (dword [ebp*2], 4); dump();
ret (); dump();
ret (4); dump();
mov (ptr[eax+ecx+3], edi); dump();
mov (ptr[eax+ecx+3], eax); dump();
mov (ebp, esi); dump();
mov (ecx, eax); dump();
mov (eax, ecx); dump();
mov (eax, eax); dump();
mov (ptr[(void*)0x123], edi); dump();
mov (ptr[(void*)0x123], eax); dump();
mov (ptr[eax+ecx+3], bx); dump();
mov (ptr[eax+ecx+3], ax); dump();
mov (cx, bx); dump();
mov (bp, ax); dump();
mov (ax, dx); dump();
mov (ax, ax); dump();
mov (ptr[(void*)0x123], si); dump();
mov (ptr[(void*)0x123], ax); dump();
mov (ptr[eax+ecx+3], dl); dump();
mov (ptr[eax+ecx+3], al); dump();
mov (ch, bh); dump();
mov (ah, al); dump();
mov (al, dl); dump();
mov (al, al); dump();
mov (ptr[(void*)0x123], dh); dump();
mov (ptr[(void*)0x123], al); dump();
mov (ecx, ptr[eax+ecx+3]); dump();
mov (esi, 4); dump();
mov (ecx, ptr[(void*)0x123]); dump();
mov (eax, ptr[eax+ecx+3]); dump();
mov (eax, 4); dump();
mov (eax, ptr[(void*)0x123]); dump();
mov (bl, ptr[eax+ecx+3]); dump();
mov (cl, 4); dump();
mov (dh, ptr[(void*)0x123]); dump();
mov (si, ptr[eax+ecx+3]); dump();
mov (si, 4); dump();
mov (sp, ptr[(void*)0x123]); dump();
mov (ax, ptr[eax+ecx+3]); dump();
mov (ax, 4); dump();
mov (ax, ptr[(void*)0x123]); dump();
mov (al, ptr[eax+ecx+3]); dump();
mov (al, 4); dump();
mov (al, ptr[(void*)0x123]); dump();
mov (byte [eax+edx], 4); dump();
mov (word [esi], 4); dump();
mov (dword [ebp*2], 4); dump();
movsx (edi, dl); dump();
movsx (edx, cx); dump();
movsx (ecx, ax); dump();
movsx (esi, al); dump();
movsx (ecx, byte [eax+edx]); dump();
movsx (esp, word [esi]); dump();
movsx (eax, ah); dump();
movsx (eax, cx); dump();
movsx (eax, ax); dump();
movsx (eax, al); dump();
movsx (eax, byte [eax+edx]); dump();
movsx (eax, word [esi]); dump();
movsx (sp, bl); dump();
movsx (sp, al); dump();
movsx (cx, byte [eax+edx]); dump();
movsx (ax, bh); dump();
movsx (ax, al); dump();
movsx (ax, byte [eax+edx]); dump();
movzx (ecx, dl); dump();
movzx (ecx, bp); dump();
movzx (esp, ax); dump();
movzx (ebp, al); dump();
movzx (esi, byte [eax+edx]); dump();
movzx (ebp, word [esi]); dump();
movzx (eax, cl); dump();
movzx (eax, sp); dump();
movzx (eax, ax); dump();
movzx (eax, al); dump();
movzx (eax, byte [eax+edx]); dump();
movzx (eax, word [esi]); dump();
movzx (bp, ah); dump();
movzx (di, al); dump();
movzx (di, byte [eax+edx]); dump();
movzx (ax, ah); dump();
movzx (ax, al); dump();
movzx (ax, byte [eax+edx]); dump();
cmpxchg8b (ptr[eax+ecx+3]); dump();
xadd (ptr[eax+ecx+3], cl); dump();
xadd (ptr[eax+ecx+3], al); dump();
xadd (bl, bl); dump();
xadd (dh, al); dump();
xadd (al, cl); dump();
xadd (al, al); dump();
xadd (ptr[eax+ecx+3], bx); dump();
xadd (ptr[eax+ecx+3], ax); dump();
xadd (sp, bp); dump();
xadd (dx, ax); dump();
xadd (ax, cx); dump();
xadd (ax, ax); dump();
xadd (ptr[eax+ecx+3], edi); dump();
xadd (ptr[eax+ecx+3], eax); dump();
xadd (ebp, ebx); dump();
xadd (esp, eax); dump();
xadd (eax, edx); dump();
xadd (eax, eax); dump();
xchg (ch, ptr[eax+ecx+3]); dump();
xchg (dl, ah); dump();
xchg (dl, al); dump();
xchg (al, ptr[eax+ecx+3]); dump();
xchg (al, dh); dump();
xchg (al, al); dump();
xchg (ptr[eax+ecx+3], dl); dump();
xchg (ptr[eax+ecx+3], al); dump();
xchg (bx, ptr[eax+ecx+3]); dump();
xchg (cx, dx); dump();
xchg (bx, ax); dump();
xchg (ax, ptr[eax+ecx+3]); dump();
xchg (ax, di); dump();
xchg (ax, ax); dump();
xchg (ptr[eax+ecx+3], cx); dump();
xchg (ptr[eax+ecx+3], ax); dump();
xchg (edx, ptr[eax+ecx+3]); dump();
xchg (ebp, edx); dump();
xchg (ecx, eax); dump();
xchg (eax, ptr[eax+ecx+3]); dump();
xchg (eax, edx); dump();
xchg (eax, eax); dump();
xchg (ptr[eax+ecx+3], ebx); dump();
xchg (ptr[eax+ecx+3], eax); dump();
rcl (edi, 4); dump();
rcl (esi, 1); dump();
rcl (ecx, cl); dump();
rcl (eax, 4); dump();
rcl (eax, 1); dump();
rcl (eax, cl); dump();
rcl (cl, 4); dump();
rcl (ah, 1); dump();
rcl (cl, cl); dump();
rcl (si, 4); dump();
rcl (sp, 1); dump();
rcl (di, cl); dump();
rcl (ax, 4); dump();
rcl (ax, 1); dump();
rcl (ax, cl); dump();
rcl (al, 4); dump();
rcl (al, 1); dump();
rcl (al, cl); dump();
rcl (byte [eax+edx], 4); dump();
rcl (byte [eax+edx], 1); dump();
rcl (byte [eax+edx], cl); dump();
rcl (word [esi], 4); dump();
rcl (word [esi], 1); dump();
rcl (word [esi], cl); dump();
rcl (dword [ebp*2], 4); dump();
rcl (dword [ebp*2], 1); dump();
rcl (dword [ebp*2], cl); dump();
rcr (ebx, 4); dump();
rcr (esp, 1); dump();
rcr (esp, cl); dump();
rcr (eax, 4); dump();
rcr (eax, 1); dump();
rcr (eax, cl); dump();
rcr (cl, 4); dump();
rcr (bh, 1); dump();
rcr (ch, cl); dump();
rcr (cx, 4); dump();
rcr (cx, 1); dump();
rcr (di, cl); dump();
rcr (ax, 4); dump();
rcr (ax, 1); dump();
rcr (ax, cl); dump();
rcr (al, 4); dump();
rcr (al, 1); dump();
rcr (al, cl); dump();
rcr (byte [eax+edx], 4); dump();
rcr (byte [eax+edx], 1); dump();
rcr (byte [eax+edx], cl); dump();
rcr (word [esi], 4); dump();
rcr (word [esi], 1); dump();
rcr (word [esi], cl); dump();
rcr (dword [ebp*2], 4); dump();
rcr (dword [ebp*2], 1); dump();
rcr (dword [ebp*2], cl); dump();
rol (ebp, 4); dump();
rol (edx, 1); dump();
rol (edi, cl); dump();
rol (eax, 4); dump();
rol (eax, 1); dump();
rol (eax, cl); dump();
rol (dl, 4); dump();
rol (dl, 1); dump();
rol (ch, cl); dump();
rol (dx, 4); dump();
rol (si, 1); dump();
rol (sp, cl); dump();
rol (ax, 4); dump();
rol (ax, 1); dump();
rol (ax, cl); dump();
rol (al, 4); dump();
rol (al, 1); dump();
rol (al, cl); dump();
rol (byte [eax+edx], 4); dump();
rol (byte [eax+edx], 1); dump();
rol (byte [eax+edx], cl); dump();
rol (word [esi], 4); dump();
rol (word [esi], 1); dump();
rol (word [esi], cl); dump();
rol (dword [ebp*2], 4); dump();
rol (dword [ebp*2], 1); dump();
rol (dword [ebp*2], cl); dump();
ror (ecx, 4); dump();
ror (edi, 1); dump();
ror (ebx, cl); dump();
ror (eax, 4); dump();
ror (eax, 1); dump();
ror (eax, cl); dump();
ror (ch, 4); dump();
ror (dl, 1); dump();
ror (cl, cl); dump();
ror (si, 4); dump();
ror (sp, 1); dump();
ror (si, cl); dump();
ror (ax, 4); dump();
ror (ax, 1); dump();
ror (ax, cl); dump();
ror (al, 4); dump();
ror (al, 1); dump();
ror (al, cl); dump();
ror (byte [eax+edx], 4); dump();
ror (byte [eax+edx], 1); dump();
ror (byte [eax+edx], cl); dump();
ror (word [esi], 4); dump();
ror (word [esi], 1); dump();
ror (word [esi], cl); dump();
ror (dword [ebp*2], 4); dump();
ror (dword [ebp*2], 1); dump();
ror (dword [ebp*2], cl); dump();
sar (ecx, 4); dump();
sar (edi, 1); dump();
sar (ecx, cl); dump();
sar (eax, 4); dump();
sar (eax, 1); dump();
sar (eax, cl); dump();
sar (dh, 4); dump();
sar (bl, 1); dump();
sar (cl, cl); dump();
sar (si, 4); dump();
sar (di, 1); dump();
sar (di, cl); dump();
sar (ax, 4); dump();
sar (ax, 1); dump();
sar (ax, cl); dump();
sar (al, 4); dump();
sar (al, 1); dump();
sar (al, cl); dump();
sar (byte [eax+edx], 4); dump();
sar (byte [eax+edx], 1); dump();
sar (byte [eax+edx], cl); dump();
sar (word [esi], 4); dump();
sar (word [esi], 1); dump();
sar (word [esi], cl); dump();
sar (dword [ebp*2], 4); dump();
sar (dword [ebp*2], 1); dump();
sar (dword [ebp*2], cl); dump();
shl (edx, 4); dump();
shl (ecx, 1); dump();
shl (esi, cl); dump();
shl (eax, 4); dump();
shl (eax, 1); dump();
shl (eax, cl); dump();
shl (cl, 4); dump();
shl (bl, 1); dump();
shl (ch, cl); dump();
shl (sp, 4); dump();
shl (bx, 1); dump();
shl (bp, cl); dump();
shl (ax, 4); dump();
shl (ax, 1); dump();
shl (ax, cl); dump();
shl (al, 4); dump();
shl (al, 1); dump();
shl (al, cl); dump();
shl (byte [eax+edx], 4); dump();
shl (byte [eax+edx], 1); dump();
shl (byte [eax+edx], cl); dump();
shl (word [esi], 4); dump();
shl (word [esi], 1); dump();
shl (word [esi], cl); dump();
shl (dword [ebp*2], 4); dump();
shl (dword [ebp*2], 1); dump();
shl (dword [ebp*2], cl); dump();
shr (ebp, 4); dump();
shr (edx, 1); dump();
shr (ecx, cl); dump();
shr (eax, 4); dump();
shr (eax, 1); dump();
shr (eax, cl); dump();
shr (bh, 4); dump();
shr (ch, 1); dump();
shr (ah, cl); dump();
shr (sp, 4); dump();
shr (di, 1); dump();
shr (bp, cl); dump();
shr (ax, 4); dump();
shr (ax, 1); dump();
shr (ax, cl); dump();
shr (al, 4); dump();
shr (al, 1); dump();
shr (al, cl); dump();
shr (byte [eax+edx], 4); dump();
shr (byte [eax+edx], 1); dump();
shr (byte [eax+edx], cl); dump();
shr (word [esi], 4); dump();
shr (word [esi], 1); dump();
shr (word [esi], cl); dump();
shr (dword [ebp*2], 4); dump();
shr (dword [ebp*2], 1); dump();
shr (dword [ebp*2], cl); dump();
sal (edx, 4); dump();
sal (ebp, 1); dump();
sal (esp, cl); dump();
sal (eax, 4); dump();
sal (eax, 1); dump();
sal (eax, cl); dump();
sal (dh, 4); dump();
sal (dh, 1); dump();
sal (cl, cl); dump();
sal (bp, 4); dump();
sal (dx, 1); dump();
sal (bp, cl); dump();
sal (ax, 4); dump();
sal (ax, 1); dump();
sal (ax, cl); dump();
sal (al, 4); dump();
sal (al, 1); dump();
sal (al, cl); dump();
sal (byte [eax+edx], 4); dump();
sal (byte [eax+edx], 1); dump();
sal (byte [eax+edx], cl); dump();
sal (word [esi], 4); dump();
sal (word [esi], 1); dump();
sal (word [esi], cl); dump();
sal (dword [ebp*2], 4); dump();
sal (dword [ebp*2], 1); dump();
sal (dword [ebp*2], cl); dump();
shld (ptr[eax+ecx+3], esp, 4); dump();
shld (ptr[eax+ecx+3], esp, cl); dump();
shld (ptr[eax+ecx+3], eax, 4); dump();
shld (ptr[eax+ecx+3], eax, cl); dump();
shld (esp, ecx, 4); dump();
shld (edx, ecx, cl); dump();
shld (esi, eax, 4); dump();
shld (ecx, eax, cl); dump();
shld (eax, ebx, 4); dump();
shld (eax, ecx, cl); dump();
shld (eax, eax, 4); dump();
shld (eax, eax, cl); dump();
shld (ptr[eax+ecx+3], dx, 4); dump();
shld (ptr[eax+ecx+3], cx, cl); dump();
shld (ptr[eax+ecx+3], ax, 4); dump();
shld (ptr[eax+ecx+3], ax, cl); dump();
shld (sp, si, 4); dump();
shld (cx, bp, cl); dump();
shld (bx, ax, 4); dump();
shld (di, ax, cl); dump();
shld (ax, bx, 4); dump();
shld (ax, cx, cl); dump();
shld (ax, ax, 4); dump();
shld (ax, ax, cl); dump();
shrd (ptr[eax+ecx+3], ebx, 4); dump();
shrd (ptr[eax+ecx+3], esi, cl); dump();
shrd (ptr[eax+ecx+3], eax, 4); dump();
shrd (ptr[eax+ecx+3], eax, cl); dump();
shrd (ebx, edi, 4); dump();
shrd (edx, esp, cl); dump();
shrd (ecx, eax, 4); dump();
shrd (edx, eax, cl); dump();
shrd (eax, esi, 4); dump();
shrd (eax, ecx, cl); dump();
shrd (eax, eax, 4); dump();
shrd (eax, eax, cl); dump();
shrd (ptr[eax+ecx+3], bp, 4); dump();
shrd (ptr[eax+ecx+3], si, cl); dump();
shrd (ptr[eax+ecx+3], ax, 4); dump();
shrd (ptr[eax+ecx+3], ax, cl); dump();
shrd (si, si, 4); dump();
shrd (di, cx, cl); dump();
shrd (sp, ax, 4); dump();
shrd (sp, ax, cl); dump();
shrd (ax, bx, 4); dump();
shrd (ax, cx, cl); dump();
shrd (ax, ax, 4); dump();
shrd (ax, ax, cl); dump();
bsr (esi, ptr[eax+ecx+3]); dump();
bsr (edi, ecx); dump();
bsr (ecx, eax); dump();
bsr (eax, ptr[eax+ecx+3]); dump();
bsr (eax, edi); dump();
bsr (eax, eax); dump();
bsr (si, ptr[eax+ecx+3]); dump();
bsr (cx, bp); dump();
bsr (si, ax); dump();
bsr (ax, ptr[eax+ecx+3]); dump();
bsr (ax, bx); dump();
bsr (ax, ax); dump();
bsf (ecx, ptr[eax+ecx+3]); dump();
bsf (edi, esp); dump();
bsf (esi, eax); dump();
bsf (eax, ptr[eax+ecx+3]); dump();
bsf (eax, edi); dump();
bsf (eax, eax); dump();
bsf (bx, ptr[eax+ecx+3]); dump();
bsf (bp, bp); dump();
bsf (bp, ax); dump();
bsf (ax, ptr[eax+ecx+3]); dump();
bsf (ax, dx); dump();
bsf (ax, ax); dump();
ldmxcsr (ptr[eax+ecx+3]); dump();
movmskps (ebp, xm1); dump();
movmskps (eax, xm5); dump();
movmskpd (ebx, xm1); dump();
movmskpd (eax, xm2); dump();
stmxcsr (ptr[eax+ecx+3]); dump();
maskmovq (mm6, mm5); dump();
movntps (ptr[eax+ecx+3], xm7); dump();
movntq (ptr[eax+ecx+3], mm0); dump();
prefetcht0 (ptr[eax+ecx+3]); dump();
prefetcht1 (ptr[eax+ecx+3]); dump();
prefetcht2 (ptr[eax+ecx+3]); dump();
prefetchnta (ptr[eax+ecx+3]); dump();
maskmovdqu (xm1, xm3); dump();
movntpd (ptr[eax+ecx+3], xm6); dump();
movntdq (ptr[eax+ecx+3], xm5); dump();
movnti (ptr[eax+ecx+3], edi); dump();
movnti (ptr[eax+ecx+3], eax); dump();
movhlps (xm2, xm0); dump();
movlhps (xm0, xm4); dump();
movd (ptr[eax+ecx+3], mm5); dump();
movd (ptr[eax+ecx+3], xm1); dump();
movd (edx, mm4); dump();
movd (ebx, xm0); dump();
movd (eax, mm2); dump();
movd (eax, xm2); dump();
movd (dword [ebp*2], mm4); dump();
movd (dword [ebp*2], xm0); dump();
movd (mm3, ptr[eax+ecx+3]); dump();
movd (mm2, esp); dump();
movd (mm1, eax); dump();
movd (mm1, dword [ebp*2]); dump();
movd (xm7, ptr[eax+ecx+3]); dump();
movd (xm2, ecx); dump();
movd (xm5, eax); dump();
movd (xm4, dword [ebp*2]); dump();
movq (mm4, mm6); dump();
movq (mm6, ptr[eax+ecx+3]); dump();
movq (ptr[eax+ecx+3], mm7); dump();
movq (xm3, xm2); dump();
movq (xm1, ptr[eax+ecx+3]); dump();
movq (ptr[eax+ecx+3], xm3); dump();
movq (mm5, qword[eax]); dump();
movq (xm0, qword[eax]); dump();
movq (mm1, ptr[eax]); dump();
movq (xm0, ptr[eax]); dump();
movq (qword[eax] , mm2); dump();
movq (qword[eax] , xm3); dump();
movq (ptr[eax] , mm2); dump();
movq (ptr[eax] , xm1); dump();
lddqu (xm5, ptr[eax+ecx+3]); dump();
packssdw (mm7, mm2); dump();
packssdw (mm0, ptr[eax+ecx+3]); dump();
packssdw (xm2, xm3); dump();
packssdw (xm0, ptr[eax+ecx+3]); dump();
packsswb (mm0, mm4); dump();
packsswb (mm2, ptr[eax+ecx+3]); dump();
packsswb (xm2, xm3); dump();
packsswb (xm4, ptr[eax+ecx+3]); dump();
packuswb (mm6, mm4); dump();
packuswb (mm6, ptr[eax+ecx+3]); dump();
packuswb (xm5, xm4); dump();
packuswb (xm1, ptr[eax+ecx+3]); dump();
pand (mm3, mm2); dump();
pand (mm2, ptr[eax+ecx+3]); dump();
pand (xm2, xm5); dump();
pand (xm7, ptr[eax+ecx+3]); dump();
pandn (mm7, mm7); dump();
pandn (mm1, ptr[eax+ecx+3]); dump();
pandn (xm0, xm2); dump();
pandn (xm5, ptr[eax+ecx+3]); dump();
pmaddwd (mm7, mm5); dump();
pmaddwd (mm4, ptr[eax+ecx+3]); dump();
pmaddwd (xm1, xm6); dump();
pmaddwd (xm5, ptr[eax+ecx+3]); dump();
pmulhuw (mm2, mm2); dump();
pmulhuw (mm6, ptr[eax+ecx+3]); dump();
pmulhuw (xm6, xm6); dump();
pmulhuw (xm6, ptr[eax+ecx+3]); dump();
pmulhw (mm6, mm6); dump();
pmulhw (mm3, ptr[eax+ecx+3]); dump();
pmulhw (xm3, xm2); dump();
pmulhw (xm2, ptr[eax+ecx+3]); dump();
pmullw (mm7, mm1); dump();
pmullw (mm2, ptr[eax+ecx+3]); dump();
pmullw (xm4, xm5); dump();
pmullw (xm7, ptr[eax+ecx+3]); dump();
por (mm3, mm1); dump();
por (mm0, ptr[eax+ecx+3]); dump();
por (xm7, xm3); dump();
por (xm5, ptr[eax+ecx+3]); dump();
punpckhbw (mm5, mm4); dump();
punpckhbw (mm0, ptr[eax+ecx+3]); dump();
punpckhbw (xm0, xm5); dump();
punpckhbw (xm2, ptr[eax+ecx+3]); dump();
punpckhwd (mm1, mm5); dump();
punpckhwd (mm5, ptr[eax+ecx+3]); dump();
punpckhwd (xm5, xm7); dump();
punpckhwd (xm7, ptr[eax+ecx+3]); dump();
punpckhdq (mm7, mm1); dump();
punpckhdq (mm3, ptr[eax+ecx+3]); dump();
punpckhdq (xm6, xm0); dump();
punpckhdq (xm5, ptr[eax+ecx+3]); dump();
punpcklbw (mm2, mm6); dump();
punpcklbw (mm0, ptr[eax+ecx+3]); dump();
punpcklbw (xm2, xm6); dump();
punpcklbw (xm2, ptr[eax+ecx+3]); dump();
punpcklwd (mm2, mm0); dump();
punpcklwd (mm0, ptr[eax+ecx+3]); dump();
punpcklwd (xm3, xm0); dump();
punpcklwd (xm6, ptr[eax+ecx+3]); dump();
punpckldq (mm3, mm4); dump();
punpckldq (mm0, ptr[eax+ecx+3]); dump();
punpckldq (xm2, xm0); dump();
punpckldq (xm3, ptr[eax+ecx+3]); dump();
pxor (mm7, mm5); dump();
pxor (mm5, ptr[eax+ecx+3]); dump();
pxor (xm5, xm0); dump();
pxor (xm4, ptr[eax+ecx+3]); dump();
paddb (mm4, mm4); dump();
paddb (mm7, ptr[eax+ecx+3]); dump();
paddb (xm2, xm7); dump();
paddb (xm2, ptr[eax+ecx+3]); dump();
paddw (mm7, mm2); dump();
paddw (mm5, ptr[eax+ecx+3]); dump();
paddw (xm3, xm2); dump();
paddw (xm6, ptr[eax+ecx+3]); dump();
paddd (mm6, mm4); dump();
paddd (mm5, ptr[eax+ecx+3]); dump();
paddd (xm5, xm6); dump();
paddd (xm2, ptr[eax+ecx+3]); dump();
paddsb (mm3, mm5); dump();
paddsb (mm1, ptr[eax+ecx+3]); dump();
paddsb (xm6, xm3); dump();
paddsb (xm7, ptr[eax+ecx+3]); dump();
paddsw (mm0, mm7); dump();
paddsw (mm7, ptr[eax+ecx+3]); dump();
paddsw (xm6, xm2); dump();
paddsw (xm4, ptr[eax+ecx+3]); dump();
paddusb (mm2, mm7); dump();
paddusb (mm5, ptr[eax+ecx+3]); dump();
paddusb (xm7, xm1); dump();
paddusb (xm2, ptr[eax+ecx+3]); dump();
paddusw (mm6, mm5); dump();
paddusw (mm4, ptr[eax+ecx+3]); dump();
paddusw (xm3, xm6); dump();
paddusw (xm4, ptr[eax+ecx+3]); dump();
pcmpeqb (mm1, mm3); dump();
pcmpeqb (mm7, ptr[eax+ecx+3]); dump();
pcmpeqb (xm7, xm7); dump();
pcmpeqb (xm0, ptr[eax+ecx+3]); dump();
pcmpeqw (mm4, mm6); dump();
pcmpeqw (mm6, ptr[eax+ecx+3]); dump();
pcmpeqw (xm0, xm1); dump();
pcmpeqw (xm5, ptr[eax+ecx+3]); dump();
pcmpeqd (mm6, mm1); dump();
pcmpeqd (mm6, ptr[eax+ecx+3]); dump();
pcmpeqd (xm2, xm6); dump();
pcmpeqd (xm3, ptr[eax+ecx+3]); dump();
pcmpgtb (mm1, mm7); dump();
pcmpgtb (mm6, ptr[eax+ecx+3]); dump();
pcmpgtb (xm3, xm2); dump();
pcmpgtb (xm3, ptr[eax+ecx+3]); dump();
pcmpgtw (mm5, mm0); dump();
pcmpgtw (mm3, ptr[eax+ecx+3]); dump();
pcmpgtw (xm6, xm1); dump();
pcmpgtw (xm1, ptr[eax+ecx+3]); dump();
pcmpgtd (mm7, mm0); dump();
pcmpgtd (mm1, ptr[eax+ecx+3]); dump();
pcmpgtd (xm1, xm7); dump();
pcmpgtd (xm6, ptr[eax+ecx+3]); dump();
psllw (mm0, mm5); dump();
psllw (mm4, ptr[eax+ecx+3]); dump();
psllw (xm2, xm5); dump();
psllw (xm6, ptr[eax+ecx+3]); dump();
pslld (mm3, mm4); dump();
pslld (mm7, ptr[eax+ecx+3]); dump();
pslld (xm4, xm1); dump();
pslld (xm2, ptr[eax+ecx+3]); dump();
psllq (mm2, mm5); dump();
psllq (mm3, ptr[eax+ecx+3]); dump();
psllq (xm7, xm2); dump();
psllq (xm6, ptr[eax+ecx+3]); dump();
psraw (mm2, mm0); dump();
psraw (mm3, ptr[eax+ecx+3]); dump();
psraw (xm5, xm2); dump();
psraw (xm7, ptr[eax+ecx+3]); dump();
psrad (mm5, mm1); dump();
psrad (mm5, ptr[eax+ecx+3]); dump();
psrad (xm7, xm1); dump();
psrad (xm2, ptr[eax+ecx+3]); dump();
psrlw (mm3, mm7); dump();
psrlw (mm7, ptr[eax+ecx+3]); dump();
psrlw (xm1, xm2); dump();
psrlw (xm5, ptr[eax+ecx+3]); dump();
psrld (mm5, mm7); dump();
psrld (mm7, ptr[eax+ecx+3]); dump();
psrld (xm1, xm4); dump();
psrld (xm1, ptr[eax+ecx+3]); dump();
psrlq (mm4, mm4); dump();
psrlq (mm4, ptr[eax+ecx+3]); dump();
psrlq (xm4, xm1); dump();
psrlq (xm5, ptr[eax+ecx+3]); dump();
psubb (mm3, mm0); dump();
psubb (mm6, ptr[eax+ecx+3]); dump();
psubb (xm2, xm7); dump();
psubb (xm2, ptr[eax+ecx+3]); dump();
psubw (mm7, mm2); dump();
psubw (mm4, ptr[eax+ecx+3]); dump();
psubw (xm2, xm7); dump();
psubw (xm7, ptr[eax+ecx+3]); dump();
psubd (mm7, mm4); dump();
psubd (mm3, ptr[eax+ecx+3]); dump();
psubd (xm6, xm4); dump();
psubd (xm7, ptr[eax+ecx+3]); dump();
psubsb (mm7, mm4); dump();
psubsb (mm2, ptr[eax+ecx+3]); dump();
psubsb (xm3, xm7); dump();
psubsb (xm5, ptr[eax+ecx+3]); dump();
psubsw (mm0, mm2); dump();
psubsw (mm6, ptr[eax+ecx+3]); dump();
psubsw (xm1, xm0); dump();
psubsw (xm6, ptr[eax+ecx+3]); dump();
psubusb (mm0, mm0); dump();
psubusb (mm4, ptr[eax+ecx+3]); dump();
psubusb (xm0, xm1); dump();
psubusb (xm1, ptr[eax+ecx+3]); dump();
psubusw (mm4, mm5); dump();
psubusw (mm3, ptr[eax+ecx+3]); dump();
psubusw (xm7, xm2); dump();
psubusw (xm4, ptr[eax+ecx+3]); dump();
pavgb (mm5, mm7); dump();
pavgb (mm3, ptr[eax+ecx+3]); dump();
pavgb (xm6, xm6); dump();
pavgb (xm6, ptr[eax+ecx+3]); dump();
pavgw (mm0, mm4); dump();
pavgw (mm7, ptr[eax+ecx+3]); dump();
pavgw (xm5, xm3); dump();
pavgw (xm6, ptr[eax+ecx+3]); dump();
pmaxsw (mm4, mm0); dump();
pmaxsw (mm5, ptr[eax+ecx+3]); dump();
pmaxsw (xm2, xm6); dump();
pmaxsw (xm1, ptr[eax+ecx+3]); dump();
pmaxub (mm1, mm2); dump();
pmaxub (mm7, ptr[eax+ecx+3]); dump();
pmaxub (xm4, xm2); dump();
pmaxub (xm0, ptr[eax+ecx+3]); dump();
pminsw (mm1, mm2); dump();
pminsw (mm0, ptr[eax+ecx+3]); dump();
pminsw (xm7, xm7); dump();
pminsw (xm2, ptr[eax+ecx+3]); dump();
pminub (mm4, mm7); dump();
pminub (mm6, ptr[eax+ecx+3]); dump();
pminub (xm1, xm4); dump();
pminub (xm2, ptr[eax+ecx+3]); dump();
psadbw (mm5, mm7); dump();
psadbw (mm7, ptr[eax+ecx+3]); dump();
psadbw (xm4, xm6); dump();
psadbw (xm2, ptr[eax+ecx+3]); dump();
paddq (mm1, mm2); dump();
paddq (mm5, ptr[eax+ecx+3]); dump();
paddq (xm2, xm4); dump();
paddq (xm6, ptr[eax+ecx+3]); dump();
pmuludq (mm5, mm4); dump();
pmuludq (mm0, ptr[eax+ecx+3]); dump();
pmuludq (xm4, xm0); dump();
pmuludq (xm3, ptr[eax+ecx+3]); dump();
psubq (mm6, mm1); dump();
psubq (mm4, ptr[eax+ecx+3]); dump();
psubq (xm4, xm4); dump();
psubq (xm4, ptr[eax+ecx+3]); dump();
psllw (mm3, 4); dump();
psllw (xm5, 4); dump();
pslld (mm0, 4); dump();
pslld (xm4, 4); dump();
psllq (mm5, 4); dump();
psllq (xm5, 4); dump();
psraw (mm4, 4); dump();
psraw (xm5, 4); dump();
psrad (mm6, 4); dump();
psrad (xm4, 4); dump();
psrlw (mm2, 4); dump();
psrlw (xm5, 4); dump();
psrld (mm5, 4); dump();
psrld (xm6, 4); dump();
psrlq (mm3, 4); dump();
psrlq (xm6, 4); dump();
pslldq (xm5, 4); dump();
psrldq (xm3, 4); dump();
pmovmskb (edx, mm0); dump();
pmovmskb (edi, xm7); dump();
pmovmskb (eax, mm4); dump();
pmovmskb (eax, xm0); dump();
pextrw (ebp, mm3, 4); dump();
pextrw (ecx, xm4, 4); dump();
pextrw (eax, mm6, 4); dump();
pextrw (eax, xm5, 4); dump();
pinsrw (mm4, ptr[eax+ecx+3], 4); dump();
pinsrw (mm7, esi, 4); dump();
pinsrw (mm4, eax, 4); dump();
pinsrw (xm0, ptr[eax+ecx+3], 4); dump();
pinsrw (xm6, esp, 4); dump();
pinsrw (xm2, eax, 4); dump();
pshufw (mm3, mm7, 4); dump();
pshufw (mm4, ptr[eax+ecx+3], 4); dump();
pshuflw (xm7, xm0, 4); dump();
pshuflw (xm0, ptr[eax+ecx+3], 4); dump();
pshufhw (xm5, xm1, 4); dump();
pshufhw (xm2, ptr[eax+ecx+3], 4); dump();
pshufd (xm5, xm1, 4); dump();
pshufd (xm3, ptr[eax+ecx+3], 4); dump();
movdqa (xm1, xm4); dump();
movdqa (xm4, ptr[eax+ecx+3]); dump();
movdqa (ptr[eax+ecx+3], xm7); dump();
movdqu (xm6, xm1); dump();
movdqu (xm7, ptr[eax+ecx+3]); dump();
movdqu (ptr[eax+ecx+3], xm5); dump();
movaps (xm2, xm5); dump();
movaps (xm5, ptr[eax+ecx+3]); dump();
movaps (ptr[eax+ecx+3], xm2); dump();
movss (xm5, xm1); dump();
movss (xm1, ptr[eax+ecx+3]); dump();
movss (ptr[eax+ecx+3], xm6); dump();
movups (xm0, xm7); dump();
movups (xm7, ptr[eax+ecx+3]); dump();
movups (ptr[eax+ecx+3], xm7); dump();
movapd (xm5, xm0); dump();
movapd (xm0, ptr[eax+ecx+3]); dump();
movapd (ptr[eax+ecx+3], xm7); dump();
movsd (xm5, xm2); dump();
movsd (xm1, ptr[eax+ecx+3]); dump();
movsd (ptr[eax+ecx+3], xm5); dump();
movupd (xm7, xm6); dump();
movupd (xm3, ptr[eax+ecx+3]); dump();
movupd (ptr[eax+ecx+3], xm6); dump();
movq2dq (xm6, mm2); dump();
movdq2q (mm7, xm7); dump();
addps (xm6, xm2); dump();
addps (xm5, ptr[eax+ecx+3]); dump();
addss (xm7, xm3); dump();
addss (xm6, ptr[eax+ecx+3]); dump();
addpd (xm7, xm1); dump();
addpd (xm6, ptr[eax+ecx+3]); dump();
addsd (xm6, xm3); dump();
addsd (xm0, ptr[eax+ecx+3]); dump();
andnps (xm3, xm7); dump();
andnps (xm3, ptr[eax+ecx+3]); dump();
andnpd (xm5, xm3); dump();
andnpd (xm4, ptr[eax+ecx+3]); dump();
andps (xm6, xm3); dump();
andps (xm6, ptr[eax+ecx+3]); dump();
andpd (xm4, xm4); dump();
andpd (xm2, ptr[eax+ecx+3]); dump();
cmpps (xm4, xm0, 4); dump();
cmpps (xm2, ptr[eax+ecx+3], 4); dump();
cmpss (xm0, xm1, 4); dump();
cmpss (xm7, ptr[eax+ecx+3], 4); dump();
cmppd (xm0, xm0, 4); dump();
cmppd (xm2, ptr[eax+ecx+3], 4); dump();
cmpsd (xm1, xm6, 4); dump();
cmpsd (xm3, ptr[eax+ecx+3], 4); dump();
divps (xm4, xm1); dump();
divps (xm5, ptr[eax+ecx+3]); dump();
divss (xm4, xm5); dump();
divss (xm0, ptr[eax+ecx+3]); dump();
divpd (xm6, xm5); dump();
divpd (xm1, ptr[eax+ecx+3]); dump();
divsd (xm0, xm2); dump();
divsd (xm4, ptr[eax+ecx+3]); dump();
maxps (xm2, xm5); dump();
maxps (xm2, ptr[eax+ecx+3]); dump();
maxss (xm3, xm6); dump();
maxss (xm3, ptr[eax+ecx+3]); dump();
maxpd (xm5, xm2); dump();
maxpd (xm0, ptr[eax+ecx+3]); dump();
maxsd (xm6, xm4); dump();
maxsd (xm5, ptr[eax+ecx+3]); dump();
minps (xm3, xm0); dump();
minps (xm3, ptr[eax+ecx+3]); dump();
minss (xm5, xm4); dump();
minss (xm5, ptr[eax+ecx+3]); dump();
minpd (xm0, xm7); dump();
minpd (xm7, ptr[eax+ecx+3]); dump();
minsd (xm2, xm4); dump();
minsd (xm7, ptr[eax+ecx+3]); dump();
mulps (xm7, xm2); dump();
mulps (xm3, ptr[eax+ecx+3]); dump();
mulss (xm0, xm7); dump();
mulss (xm5, ptr[eax+ecx+3]); dump();
mulpd (xm0, xm6); dump();
mulpd (xm1, ptr[eax+ecx+3]); dump();
mulsd (xm0, xm4); dump();
mulsd (xm1, ptr[eax+ecx+3]); dump();
orps (xm4, xm3); dump();
orps (xm1, ptr[eax+ecx+3]); dump();
orpd (xm5, xm6); dump();
orpd (xm1, ptr[eax+ecx+3]); dump();
rcpps (xm6, xm6); dump();
rcpps (xm4, ptr[eax+ecx+3]); dump();
rcpss (xm3, xm3); dump();
rcpss (xm0, ptr[eax+ecx+3]); dump();
rsqrtps (xm6, xm4); dump();
rsqrtps (xm3, ptr[eax+ecx+3]); dump();
rsqrtss (xm1, xm1); dump();
rsqrtss (xm7, ptr[eax+ecx+3]); dump();
shufps (xm6, xm6, 4); dump();
shufps (xm7, ptr[eax+ecx+3], 4); dump();
shufpd (xm1, xm4, 4); dump();
shufpd (xm0, ptr[eax+ecx+3], 4); dump();
sqrtps (xm7, xm6); dump();
sqrtps (xm4, ptr[eax+ecx+3]); dump();
sqrtss (xm5, xm6); dump();
sqrtss (xm3, ptr[eax+ecx+3]); dump();
sqrtpd (xm2, xm4); dump();
sqrtpd (xm7, ptr[eax+ecx+3]); dump();
sqrtsd (xm6, xm2); dump();
sqrtsd (xm1, ptr[eax+ecx+3]); dump();
subps (xm4, xm6); dump();
subps (xm0, ptr[eax+ecx+3]); dump();
subss (xm4, xm6); dump();
subss (xm0, ptr[eax+ecx+3]); dump();
subpd (xm6, xm0); dump();
subpd (xm2, ptr[eax+ecx+3]); dump();
subsd (xm0, xm7); dump();
subsd (xm4, ptr[eax+ecx+3]); dump();
unpckhps (xm5, xm6); dump();
unpckhps (xm2, ptr[eax+ecx+3]); dump();
unpckhpd (xm5, xm3); dump();
unpckhpd (xm0, ptr[eax+ecx+3]); dump();
unpcklps (xm6, xm7); dump();
unpcklps (xm2, ptr[eax+ecx+3]); dump();
unpcklpd (xm7, xm2); dump();
unpcklpd (xm3, ptr[eax+ecx+3]); dump();
xorps (xm0, xm3); dump();
xorps (xm5, ptr[eax+ecx+3]); dump();
xorpd (xm0, xm5); dump();
xorpd (xm3, ptr[eax+ecx+3]); dump();
punpckhqdq (xm5, xm3); dump();
punpckhqdq (xm2, ptr[eax+ecx+3]); dump();
punpcklqdq (xm2, xm6); dump();
punpcklqdq (xm4, ptr[eax+ecx+3]); dump();
comiss (xm5, xm6); dump();
comiss (xm7, ptr[eax+ecx+3]); dump();
ucomiss (xm2, xm5); dump();
ucomiss (xm4, ptr[eax+ecx+3]); dump();
comisd (xm2, xm7); dump();
comisd (xm2, ptr[eax+ecx+3]); dump();
ucomisd (xm7, xm6); dump();
ucomisd (xm6, ptr[eax+ecx+3]); dump();
cvtpd2ps (xm0, xm3); dump();
cvtpd2ps (xm3, ptr[eax+ecx+3]); dump();
cvtps2pd (xm1, xm4); dump();
cvtps2pd (xm5, ptr[eax+ecx+3]); dump();
cvtsd2ss (xm0, xm0); dump();
cvtsd2ss (xm2, ptr[eax+ecx+3]); dump();
cvtss2sd (xm5, xm4); dump();
cvtss2sd (xm7, ptr[eax+ecx+3]); dump();
cvtpd2dq (xm3, xm7); dump();
cvtpd2dq (xm1, ptr[eax+ecx+3]); dump();
cvttpd2dq (xm3, xm5); dump();
cvttpd2dq (xm1, ptr[eax+ecx+3]); dump();
cvtdq2pd (xm3, xm4); dump();
cvtdq2pd (xm0, ptr[eax+ecx+3]); dump();
cvtps2dq (xm2, xm5); dump();
cvtps2dq (xm0, ptr[eax+ecx+3]); dump();
cvttps2dq (xm7, xm4); dump();
cvttps2dq (xm1, ptr[eax+ecx+3]); dump();
cvtdq2ps (xm1, xm5); dump();
cvtdq2ps (xm2, ptr[eax+ecx+3]); dump();
addsubpd (xm5, xm4); dump();
addsubpd (xm2, ptr[eax+ecx+3]); dump();
addsubps (xm7, xm0); dump();
addsubps (xm3, ptr[eax+ecx+3]); dump();
haddpd (xm5, xm2); dump();
haddpd (xm3, ptr[eax+ecx+3]); dump();
haddps (xm6, xm5); dump();
haddps (xm7, ptr[eax+ecx+3]); dump();
hsubpd (xm1, xm5); dump();
hsubpd (xm7, ptr[eax+ecx+3]); dump();
hsubps (xm3, xm0); dump();
hsubps (xm2, ptr[eax+ecx+3]); dump();
movddup (xm5, xm2); dump();
movddup (xm2, ptr[eax+ecx+3]); dump();
movshdup (xm7, xm4); dump();
movshdup (xm4, ptr[eax+ecx+3]); dump();
movsldup (xm7, xm5); dump();
movsldup (xm5, ptr[eax+ecx+3]); dump();
cvtpi2ps (xm5, mm6); dump();
cvtpi2ps (xm5, ptr[eax+ecx+3]); dump();
cvtps2pi (mm6, xm1); dump();
cvtps2pi (mm2, ptr[eax+ecx+3]); dump();
cvtsi2ss (xm4, ptr[eax+ecx+3]); dump();
cvtsi2ss (xm1, esp); dump();
cvtsi2ss (xm4, eax); dump();
cvtss2si (esi, xm0); dump();
cvtss2si (ecx, ptr[eax+ecx+3]); dump();
cvtss2si (eax, xm3); dump();
cvtss2si (eax, ptr[eax+ecx+3]); dump();
cvttps2pi (mm7, xm5); dump();
cvttps2pi (mm0, ptr[eax+ecx+3]); dump();
cvttss2si (ecx, xm0); dump();
cvttss2si (esi, ptr[eax+ecx+3]); dump();
cvttss2si (eax, xm1); dump();
cvttss2si (eax, ptr[eax+ecx+3]); dump();
cvtpi2pd (xm2, mm0); dump();
cvtpi2pd (xm2, ptr[eax+ecx+3]); dump();
cvtpd2pi (mm0, xm6); dump();
cvtpd2pi (mm3, ptr[eax+ecx+3]); dump();
cvtsi2sd (xm7, ptr[eax+ecx+3]); dump();
cvtsi2sd (xm1, esp); dump();
cvtsi2sd (xm1, eax); dump();
cvtsd2si (edx, xm3); dump();
cvtsd2si (esi, ptr[eax+ecx+3]); dump();
cvtsd2si (eax, xm2); dump();
cvtsd2si (eax, ptr[eax+ecx+3]); dump();
cvttpd2pi (mm3, xm5); dump();
cvttpd2pi (mm4, ptr[eax+ecx+3]); dump();
cvttsd2si (ecx, xm2); dump();
cvttsd2si (ebx, ptr[eax+ecx+3]); dump();
cvttsd2si (eax, xm4); dump();
cvttsd2si (eax, ptr[eax+ecx+3]); dump();
movhps (xm7, ptr[eax+ecx+3]); dump();
movhps (ptr[eax+ecx+3], xm2); dump();
movlps (xm2, ptr[eax+ecx+3]); dump();
movlps (ptr[eax+ecx+3], xm2); dump();
movhpd (xm1, ptr[eax+ecx+3]); dump();
movhpd (ptr[eax+ecx+3], xm0); dump();
movlpd (xm3, ptr[eax+ecx+3]); dump();
movlpd (ptr[eax+ecx+3], xm0); dump();
cmovo (ecx, ptr[eax+ecx+3]); dump();
cmovo (edi, esp); dump();
cmovo (edi, eax); dump();
cmovo (eax, ptr[eax+ecx+3]); dump();
cmovo (eax, ebp); dump();
cmovo (eax, eax); dump();
seto (ptr[eax+ecx+3]); dump();
seto (bh); dump();
seto (al); dump();
cmovno (ecx, ptr[eax+ecx+3]); dump();
cmovno (edi, ecx); dump();
cmovno (edi, eax); dump();
cmovno (eax, ptr[eax+ecx+3]); dump();
cmovno (eax, ecx); dump();
cmovno (eax, eax); dump();
setno (ptr[eax+ecx+3]); dump();
setno (cl); dump();
setno (al); dump();
cmovb (ecx, ptr[eax+ecx+3]); dump();
cmovb (esi, ecx); dump();
cmovb (edx, eax); dump();
cmovb (eax, ptr[eax+ecx+3]); dump();
cmovb (eax, esp); dump();
cmovb (eax, eax); dump();
setb (ptr[eax+ecx+3]); dump();
setb (cl); dump();
setb (al); dump();
cmovnae (edi, ptr[eax+ecx+3]); dump();
cmovnae (esp, esp); dump();
cmovnae (ebp, eax); dump();
cmovnae (eax, ptr[eax+ecx+3]); dump();
cmovnae (eax, ebx); dump();
cmovnae (eax, eax); dump();
setnae (ptr[eax+ecx+3]); dump();
setnae (dl); dump();
setnae (al); dump();
cmovnb (ecx, ptr[eax+ecx+3]); dump();
cmovnb (ecx, ebx); dump();
cmovnb (edx, eax); dump();
cmovnb (eax, ptr[eax+ecx+3]); dump();
cmovnb (eax, ebp); dump();
cmovnb (eax, eax); dump();
setnb (ptr[eax+ecx+3]); dump();
setnb (dl); dump();
setnb (al); dump();
cmovae (edx, ptr[eax+ecx+3]); dump();
cmovae (edi, esi); dump();
cmovae (edx, eax); dump();
cmovae (eax, ptr[eax+ecx+3]); dump();
cmovae (eax, edi); dump();
cmovae (eax, eax); dump();
setae (ptr[eax+ecx+3]); dump();
setae (bl); dump();
setae (al); dump();
cmove (edx, ptr[eax+ecx+3]); dump();
cmove (ecx, ebx); dump();
cmove (ecx, eax); dump();
cmove (eax, ptr[eax+ecx+3]); dump();
cmove (eax, esi); dump();
cmove (eax, eax); dump();
sete (ptr[eax+ecx+3]); dump();
sete (dh); dump();
sete (al); dump();
cmovz (ecx, ptr[eax+ecx+3]); dump();
cmovz (ecx, ebp); dump();
cmovz (ebx, eax); dump();
cmovz (eax, ptr[eax+ecx+3]); dump();
cmovz (eax, edi); dump();
cmovz (eax, eax); dump();
setz (ptr[eax+ecx+3]); dump();
setz (ah); dump();
setz (al); dump();
cmovne (ebp, ptr[eax+ecx+3]); dump();
cmovne (ebx, ebp); dump();
cmovne (ebp, eax); dump();
cmovne (eax, ptr[eax+ecx+3]); dump();
cmovne (eax, edx); dump();
cmovne (eax, eax); dump();
setne (ptr[eax+ecx+3]); dump();
setne (cl); dump();
setne (al); dump();
cmovnz (ebx, ptr[eax+ecx+3]); dump();
cmovnz (edi, ecx); dump();
cmovnz (ecx, eax); dump();
cmovnz (eax, ptr[eax+ecx+3]); dump();
cmovnz (eax, ecx); dump();
cmovnz (eax, eax); dump();
setnz (ptr[eax+ecx+3]); dump();
setnz (cl); dump();
setnz (al); dump();
cmovbe (edx, ptr[eax+ecx+3]); dump();
cmovbe (ebp, ebp); dump();
cmovbe (edi, eax); dump();
cmovbe (eax, ptr[eax+ecx+3]); dump();
cmovbe (eax, edx); dump();
cmovbe (eax, eax); dump();
setbe (ptr[eax+ecx+3]); dump();
setbe (bh); dump();
setbe (al); dump();
cmovna (ecx, ptr[eax+ecx+3]); dump();
cmovna (esi, ebp); dump();
cmovna (edi, eax); dump();
cmovna (eax, ptr[eax+ecx+3]); dump();
cmovna (eax, ebx); dump();
cmovna (eax, eax); dump();
setna (ptr[eax+ecx+3]); dump();
setna (cl); dump();
setna (al); dump();
cmovnbe (ecx, ptr[eax+ecx+3]); dump();
cmovnbe (edi, ebx); dump();
cmovnbe (esp, eax); dump();
cmovnbe (eax, ptr[eax+ecx+3]); dump();
cmovnbe (eax, edi); dump();
cmovnbe (eax, eax); dump();
setnbe (ptr[eax+ecx+3]); dump();
setnbe (bh); dump();
setnbe (al); dump();
cmova (esp, ptr[eax+ecx+3]); dump();
cmova (ebp, edi); dump();
cmova (ecx, eax); dump();
cmova (eax, ptr[eax+ecx+3]); dump();
cmova (eax, esi); dump();
cmova (eax, eax); dump();
seta (ptr[eax+ecx+3]); dump();
seta (dh); dump();
seta (al); dump();
cmovs (ebp, ptr[eax+ecx+3]); dump();
cmovs (edx, ebx); dump();
cmovs (ecx, eax); dump();
cmovs (eax, ptr[eax+ecx+3]); dump();
cmovs (eax, ecx); dump();
cmovs (eax, eax); dump();
sets (ptr[eax+ecx+3]); dump();
sets (cl); dump();
sets (al); dump();
cmovns (ebp, ptr[eax+ecx+3]); dump();
cmovns (esi, edx); dump();
cmovns (ecx, eax); dump();
cmovns (eax, ptr[eax+ecx+3]); dump();
cmovns (eax, edi); dump();
cmovns (eax, eax); dump();
setns (ptr[eax+ecx+3]); dump();
setns (ch); dump();
setns (al); dump();
cmovp (edx, ptr[eax+ecx+3]); dump();
cmovp (ebx, esp); dump();
cmovp (esp, eax); dump();
cmovp (eax, ptr[eax+ecx+3]); dump();
cmovp (eax, esi); dump();
cmovp (eax, eax); dump();
setp (ptr[eax+ecx+3]); dump();
setp (ch); dump();
setp (al); dump();
cmovpe (esp, ptr[eax+ecx+3]); dump();
cmovpe (edi, ecx); dump();
cmovpe (esp, eax); dump();
cmovpe (eax, ptr[eax+ecx+3]); dump();
cmovpe (eax, ebp); dump();
cmovpe (eax, eax); dump();
setpe (ptr[eax+ecx+3]); dump();
setpe (ch); dump();
setpe (al); dump();
cmovnp (edx, ptr[eax+ecx+3]); dump();
cmovnp (esi, ebx); dump();
cmovnp (edx, eax); dump();
cmovnp (eax, ptr[eax+ecx+3]); dump();
cmovnp (eax, ebp); dump();
cmovnp (eax, eax); dump();
setnp (ptr[eax+ecx+3]); dump();
setnp (bl); dump();
setnp (al); dump();
cmovpo (ecx, ptr[eax+ecx+3]); dump();
cmovpo (ebx, ecx); dump();
cmovpo (esp, eax); dump();
cmovpo (eax, ptr[eax+ecx+3]); dump();
cmovpo (eax, esp); dump();
cmovpo (eax, eax); dump();
setpo (ptr[eax+ecx+3]); dump();
setpo (bh); dump();
setpo (al); dump();
cmovl (ebx, ptr[eax+ecx+3]); dump();
cmovl (esp, ecx); dump();
cmovl (ecx, eax); dump();
cmovl (eax, ptr[eax+ecx+3]); dump();
cmovl (eax, edi); dump();
cmovl (eax, eax); dump();
setl (ptr[eax+ecx+3]); dump();
setl (cl); dump();
setl (al); dump();
cmovnge (esi, ptr[eax+ecx+3]); dump();
cmovnge (ebp, esi); dump();
cmovnge (esi, eax); dump();
cmovnge (eax, ptr[eax+ecx+3]); dump();
cmovnge (eax, ecx); dump();
cmovnge (eax, eax); dump();
setnge (ptr[eax+ecx+3]); dump();
setnge (ch); dump();
setnge (al); dump();
cmovnl (edx, ptr[eax+ecx+3]); dump();
cmovnl (ebx, esi); dump();
cmovnl (ecx, eax); dump();
cmovnl (eax, ptr[eax+ecx+3]); dump();
cmovnl (eax, ebp); dump();
cmovnl (eax, eax); dump();
setnl (ptr[eax+ecx+3]); dump();
setnl (cl); dump();
setnl (al); dump();
cmovge (edx, ptr[eax+ecx+3]); dump();
cmovge (esi, esi); dump();
cmovge (esi, eax); dump();
cmovge (eax, ptr[eax+ecx+3]); dump();
cmovge (eax, ebx); dump();
cmovge (eax, eax); dump();
setge (ptr[eax+ecx+3]); dump();
setge (cl); dump();
setge (al); dump();
cmovle (edi, ptr[eax+ecx+3]); dump();
cmovle (esi, edx); dump();
cmovle (ecx, eax); dump();
cmovle (eax, ptr[eax+ecx+3]); dump();
cmovle (eax, edi); dump();
cmovle (eax, eax); dump();
setle (ptr[eax+ecx+3]); dump();
setle (bl); dump();
setle (al); dump();
cmovng (ebx, ptr[eax+ecx+3]); dump();
cmovng (esp, ecx); dump();
cmovng (ecx, eax); dump();
cmovng (eax, ptr[eax+ecx+3]); dump();
cmovng (eax, ecx); dump();
cmovng (eax, eax); dump();
setng (ptr[eax+ecx+3]); dump();
setng (bh); dump();
setng (al); dump();
cmovnle (edi, ptr[eax+ecx+3]); dump();
cmovnle (ebx, esp); dump();
cmovnle (ebp, eax); dump();
cmovnle (eax, ptr[eax+ecx+3]); dump();
cmovnle (eax, ebp); dump();
cmovnle (eax, eax); dump();
setnle (ptr[eax+ecx+3]); dump();
setnle (dh); dump();
setnle (al); dump();
cmovg (edx, ptr[eax+ecx+3]); dump();
cmovg (esi, ebx); dump();
cmovg (ecx, eax); dump();
cmovg (eax, ptr[eax+ecx+3]); dump();
cmovg (eax, ecx); dump();
cmovg (eax, eax); dump();
setg (ptr[eax+ecx+3]); dump();
setg (cl); dump();
setg (al); dump();
fiadd (word [esi]); dump();
fiadd (dword [ebp*2]); dump();
fidiv (word [esi]); dump();
fidiv (dword [ebp*2]); dump();
fidivr (word [esi]); dump();
fidivr (dword [ebp*2]); dump();
ficom (word [esi]); dump();
ficom (dword [ebp*2]); dump();
ficomp (word [esi]); dump();
ficomp (dword [ebp*2]); dump();
fimul (word [esi]); dump();
fimul (dword [ebp*2]); dump();
fist (word [esi]); dump();
fist (dword [ebp*2]); dump();
fisub (word [esi]); dump();
fisub (dword [ebp*2]); dump();
fisubr (word [esi]); dump();
fisubr (dword [ebp*2]); dump();
fadd (dword [ebp*2]); dump();
fadd (qword [eax+ecx*8]); dump();
fcom (dword [ebp*2]); dump();
fcom (qword [eax+ecx*8]); dump();
fcomp (dword [ebp*2]); dump();
fcomp (qword [eax+ecx*8]); dump();
fdiv (dword [ebp*2]); dump();
fdiv (qword [eax+ecx*8]); dump();
fdivr (dword [ebp*2]); dump();
fdivr (qword [eax+ecx*8]); dump();
fld (dword [ebp*2]); dump();
fld (qword [eax+ecx*8]); dump();
fmul (dword [ebp*2]); dump();
fmul (qword [eax+ecx*8]); dump();
fst (dword [ebp*2]); dump();
fst (qword [eax+ecx*8]); dump();
fstp (dword [ebp*2]); dump();
fstp (qword [eax+ecx*8]); dump();
fsub (dword [ebp*2]); dump();
fsub (qword [eax+ecx*8]); dump();
fsubr (dword [ebp*2]); dump();
fsubr (qword [eax+ecx*8]); dump();
fild (word [esi]); dump();
fild (dword [ebp*2]); dump();
fild (qword [eax+ecx*8]); dump();
fistp (word [esi]); dump();
fistp (dword [ebp*2]); dump();
fistp (qword [eax+ecx*8]); dump();
fisttp (word [esi]); dump();
fisttp (dword [ebp*2]); dump();
fisttp (qword [eax+ecx*8]); dump();
clflush (ptr[eax+ecx+3]); dump();
fcom (st2); dump();
fcomp (st2); dump();
ffree (st2); dump();
fld (st2); dump();
fst (st2); dump();
fstp (st2); dump();
fucom (st2); dump();
fucomp (st2); dump();
fxch (st2); dump();
